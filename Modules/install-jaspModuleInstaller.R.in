# Generated from install-jaspBase.R.in
#
Sys.setenv(GITHUB_PAT          = "@GITHUB_PAT@")
Sys.setenv(RENV_PATHS_ROOT     = "@MODULES_RENV_ROOT_PATH@")
Sys.setenv(RENV_PATHS_CACHE    = "@MODULES_RENV_CACHE_PATH@")
Sys.setenv(RENV_PATHS_SANDBOX  = "@RENV_SANDBOX@")
Sys.setenv(JASPENGINE_LOCATION = "@JASP_ENGINE_PATH@/JASPEngine")

#Load the post-install fixes from jaspBase. Think Baron von Munchhausen ;)
source("@PROJECT_SOURCE_DIR@/Engine/jaspModuleInstaller/R/renvOverrides.R")
source("@PROJECT_SOURCE_DIR@/Engine/jaspModuleInstaller/R/checksums.R")
source("@PROJECT_SOURCE_DIR@/Engine/jaspModuleInstaller/R/utils.R")
source("@PROJECT_SOURCE_DIR@/Engine/jaspModuleInstaller/R/installModule.R")

# The R_LIBRARY_PATH might already be there, but depending on the configuration
# of the CMake, we might be installing in a different location, so, I just add
# it anyway! It gets to if-y.

if (@IS_FLATPAK_USED@) {
  source("/app/lib64/Rprofile.R")
  options(repos = "@R_REPOSITORY@")
}

.libPaths("@RENV_LIBRARY@")
sandboxPaths <- renv:::renv_sandbox_activate()

JASPMODULEINSTALLER_LIBRARY <- "@JASPMODULEINSTALLER_LIBRARY@"
PKGDEPENDS_LIBRARY          <- "@PKGDEPENDS_LIBRARY@"
RENV_LIBRARY                <- "@RENV_LIBRARY@"
R_CPP_INCLUDES_LIBRARY      <- "@R_CPP_INCLUDES_LIBRARY@"

ENGINE                 <- file.path("@PROJECT_SOURCE_DIR@", "Engine")
MODULES                <- file.path("@PROJECT_SOURCE_DIR@", "Modules")
TOOLS                  <- file.path("@PROJECT_SOURCE_DIR@", "Tools")


modulePkg     <- file.path("@PROJECT_SOURCE_DIR@", "Engine", "jaspModuleInstaller")

cat("Restoring pkgdepends\n")
setupRenv(PKGDEPENDS_LIBRARY)
renv::restore(
	library  = PKGDEPENDS_LIBRARY,
	lockfile = file.path(MODULES, "pkgdepends.lock"),
	clean    = TRUE
)

cat("Restoring jaspModuleInstaller\n")
setupRenv(JASPMODULEINSTALLER_LIBRARY)
renv::restore(
	library  = JASPMODULEINSTALLER_LIBRARY,
	lockfile = file.path(ENGINE, "jaspModuleInstaller", "renv.lock"),
	exclude  = "jaspModuleInstaller", # otherwise "clean" would remove jaspModuleInstaller
	clean    = TRUE
)

print("Installing jaspModuleInstaller")
.libPaths(JASPMODULEINSTALLER_LIBRARY)
setupRenv("@R_LIBRARY_PATH@", modulePkg)

record <- createLocalRecord(modulePkg, getModuleInfo(modulePkg), cacheAble = FALSE, addJaspToVersion = FALSE)
lf <- renv::lockfile_read(file.path(modulePkg, "renv.lock"))
lf <- renv::record(record, lockfile = lf)
cat(".libPaths()", .libPaths(), sep = "\n")

# remove the package if it is installed, otherwise renv doesn't realize we want to reinstall it
pkgName <- basename(modulePkg)
if (dir.exists(file.path(.libPaths()[1L], pkgName)))
  utils::remove.packages(pkgs = pkgName, lib = .libPaths()[1L])

renv::restore(lockfile = lf, library = .libPaths(), rebuild = pkgName)



print("jaspModuleInstaller::writeModuleStatusObject(@PROJECT_SOURCE_DIR@")
jaspModuleInstaller::writeModuleStatusObject("@PROJECT_SOURCE_DIR@")

#This is necessary because of conflicts with Matrix dep of base R lib.
#Can be removed when a new version of R updates its Matrix
if (!@IS_FLATPAK_USED@) {
	
  if (Sys.info()["sysname"] == "Darwin") { 
    options(pkgType = "source")
  }  

	renv::install("Matrix", library = JASPMODULEINSTALLER_LIBRARY, prompt = FALSE)
}

# Converting the absolute symlinks to relative symlinks on macOS
# Todo, I can do this using CMake like I do on Windows
if (Sys.info()["sysname"] == "Darwin") {
  source('@MODULES_BINARY_PATH@/symlinkTools.R')
  convertAbsoluteSymlinksToRelative('@R_LIBRARY_PATH@', '@MODULES_RENV_CACHE_PATH@')
}
